// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"ddd-example/internal/app/adapter"
	"ddd-example/internal/app/handler"
	"ddd-example/internal/app/service"
	"ddd-example/internal/infra"
	"github.com/google/wire"
	"github.com/jmoiron/sqlx"
	"github.com/joyparty/entity"
)

// Injectors from wire.go:

func initApplication(db *sqlx.DB, dbi entity.DB, cache adapter.Cacher) *Application {
	accountDBRepository := infra.NewAccountDBRepository(dbi)
	sessionTokenService := &service.SessionTokenService{
		Accounts: accountDBRepository,
	}
	authorizeHandler := &handler.AuthorizeHandler{
		Session: sessionTokenService,
	}
	changePasswordHandler := &handler.ChangePasswordHandler{
		Accounts: accountDBRepository,
	}
	accountService := &service.AccountService{
		Accounts: accountDBRepository,
	}
	loginWithEmailHandler := &handler.LoginWithEmailHandler{
		Session:  sessionTokenService,
		Accounts: accountService,
	}
	logoutHandler := &handler.LogoutHandler{
		Session: sessionTokenService,
	}
	registerHandler := &handler.RegisterHandler{
		Session:  sessionTokenService,
		Accounts: accountService,
	}
	oauthTokenService := &service.OauthTokenService{
		Cache: cache,
	}
	registerWithOauthHandler := &handler.RegisterWithOauthHandler{
		DB:         db,
		Session:    sessionTokenService,
		OauthToken: oauthTokenService,
	}
	oauthDBRepository := infra.NewOauthDBRepository(dbi)
	verifyOauthHandler := &handler.VerifyOauthHandler{
		OauthToken: oauthTokenService,
		Session:    sessionTokenService,
		Oauth:      oauthDBRepository,
		Accounts:   accountDBRepository,
	}
	application := &Application{
		AccountRepository: accountDBRepository,
		Authorize:         authorizeHandler,
		ChangePassword:    changePasswordHandler,
		LoginWithEmail:    loginWithEmailHandler,
		Logout:            logoutHandler,
		Register:          registerHandler,
		RegisterWithOauth: registerWithOauthHandler,
		VerifyOauth:       verifyOauthHandler,
	}
	return application
}

// wire.go:

var (
	repositoriesSet = wire.NewSet(wire.NewSet(infra.NewAccountDBRepository, wire.Bind(new(adapter.AccountRepository), new(*infra.AccountDBRepository))), wire.NewSet(infra.NewOauthDBRepository, wire.Bind(new(adapter.OauthRepository), new(*infra.OauthDBRepository))),
	)

	serviceSet = wire.NewSet(wire.Struct(new(service.OauthTokenService), "*"), wire.Struct(new(service.SessionTokenService), "*"), wire.Struct(new(service.AccountService), "*"))

	applicationProvider = wire.NewSet(
		repositoriesSet,
		serviceSet, wire.Struct(new(handler.AuthorizeHandler), "*"), wire.Struct(new(handler.ChangePasswordHandler), "*"), wire.Struct(new(handler.LoginWithEmailHandler), "*"), wire.Struct(new(handler.LogoutHandler), "*"), wire.Struct(new(handler.RegisterHandler), "*"), wire.Struct(new(handler.RegisterWithOauthHandler), "*"), wire.Struct(new(handler.VerifyOauthHandler), "*"), wire.Struct(new(Application), "*"),
	)
)
